@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translate(-10rem); }
  80% {
    transform: translate(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translate(10rem); }
  80% {
    transform: translate(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* universal selector */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  font-size: 50%; }

body {
  box-sizing: border-box; }

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  font-size: 1.6rem;
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  /* sets capitalization of text */
  text-transform: uppercase;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    /* sets spacing between chars in text */
    letter-spacing: 3.5rem;
    /* sets animation */
    animation-name: moveInLeft;
    animation-duration: 2s;
    animation-timing-function: ease-out;
    /*
    animation-delay: 3s;
    animation-iteration-count: 3;
    */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.7rem;
    animation: moveInRight 2s ease-out; }

.header {
  /* height of box is 95% of viewport height */
  height: 95vh;
  /* leftmost image is at the top */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.801), rgba(40, 180, 133, 0.801)), url(../img/hero.jpg);
  /* whatever width of the container, fits all of element to fit to that width */
  background-size: cover;
  /* ensures that top of background is always at top of container */
  background-position: top;
  /* specify polygon in which the element will be visible */
  clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
  position: relative; }
  .header__logo-box {
    /* sets position from the ancestor element set to position relative */
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    /* centers textbox in ancestor element with position relative */
    position: absolute;
    top: 40%;
    left: 50%;
    /* shifts x by 50% of element's width & y by 50% of element's height */
    transform: translate(-50%, -50%);
    backface-visibility: hidden;
    text-align: center; }

.btn {
  /*
  Pseudo classes are a special state of a selector.
  Link is a special state of a selector when it is an unvisited link.
  Visited is a state when the user has already clicked on the button once before and sees the button again.
 */
  /* when the btn has been clicked on */
  /*
 A CSS pseudo-element is a keyword added to a selector that
 lets you style a specific part of the selected element(s).
 In CSS, ::after creates a pseudo-element that is the last
 child of the selected element.
 */ }
  .btn:link, .btn:visited {
    /* capitalization of text */
    text-transform: uppercase;
    /* appearance of decorative lines in text */
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    /*
   The transition CSS property is a shorthand property for
   transition-property, transition-duration, transition-timing-function,
   and transition-delay. The transition-property CSS property sets
   the CSS properties to which a transition effect should be applied.
   */
    transition: all 0.2s;
    position: relative; }
  .btn:hover {
    /* lifts element up in Y direction */
    transform: translateY(-0.3rem);
    /* define x and y offset & blur of shadow */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem; }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    content: '';
    display: inline-block;
    /* This is like a child of btn element, so height and width
   are 100% of the btn, not the textbox. */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.7s; }
  .btn--animated {
    animation: moveInBottom 2s ease-out 1s;
    /* automatically applies styles at zero
   percent before the animation starts */
    animation-fill-mode: backwards; }
