/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;
$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;

/* universal selector */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  font-size: 50%;
}

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  font-size: 1.6rem;
  line-height: 1.7;
  color: $color-grey-dark;
  padding: 3rem;
  box-sizing: border-box;
}

.header {
  /* height of box is 95% of viewport height */
  height: 95vh;
  /* leftmost image is at the top */
  background-image: linear-gradient(
      to right bottom,
      rgba($color-primary-light, 0.801),
      rgba($color-primary-dark, 0.801)
    ),
    url(../img/hero.jpg);
  /* whatever width of the container, fits all of element to fit to that width */
  background-size: cover;
  /* ensures that top of background is always at top of container */
  background-position: top;
  /* specify polygon in which the element will be visible */
  clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
  position: relative;

  &__logo-box {
    /* sets position from the ancestor element set to position relative */
    position: absolute;
    top: 4rem;
    left: 4rem;
  }

  &__logo {
    height: 3.5rem;
  }

  &__text-box {
    /* centers textbox in ancestor element with position relative */
    position: absolute;
    top: 40%;
    left: 50%;
    /* shifts x by 50% of element's width & y by 50% of element's height */
    transform: translate(-50%, -50%);
    backface-visibility: hidden;
    text-align: center;
  }
}

.heading-primary {
  color: $color-white;
  /* sets capitalization of text */
  text-transform: uppercase;
  margin-bottom: 6rem;

  &--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    /* sets spacing between chars in text */
    letter-spacing: 3.5rem;
    /* sets animation */
    animation-name: moveInLeft;
    animation-duration: 2s;
    animation-timing-function: ease-out;

    /* 
    animation-delay: 3s; 
    animation-iteration-count: 3;
    */
  }

  &--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.7rem;
    animation: moveInRight 2s ease-out;
  }
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translate(-10rem);
  }

  80% {
    transform: translate(1rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translate(10rem);
  }

  80% {
    transform: translate(-1rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

.btn {
  /* 
  Pseudo classes are a special state of a selector. 
  Link is a special state of a selector when it is an unvisited link.
  Visited is a state when the user has already clicked on the button once before and sees the button again.
 */
  &:link,
  &:visited {
    /* capitalization of text */
    text-transform: uppercase;
    /* appearance of decorative lines in text */
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    /* 
   The transition CSS property is a shorthand property for 
   transition-property, transition-duration, transition-timing-function, 
   and transition-delay. The transition-property CSS property sets 
   the CSS properties to which a transition effect should be applied.
   */
    transition: all 0.2s;
    position: relative;
  }

  &:hover {
    /* lifts element up in Y direction */
    transform: translateY(-0.3rem);
    /* define x and y offset & blur of shadow */
    box-shadow: 0 1rem 2rem rgba($color-black, 0.2);

    &::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
    }
  }

  /* when the btn has been clicked on */
  &:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem;
  }

  &--white {
    background-color: $color-white;
    color: $color-grey-dark;

    &::after {
      background-color: $color-white;
    }
  }

  /* 
 A CSS pseudo-element is a keyword added to a selector that 
 lets you style a specific part of the selected element(s).
 In CSS, ::after creates a pseudo-element that is the last 
 child of the selected element.
 */
  &::after {
    content: '';
    display: inline-block;
    /* This is like a child of btn element, so height and width 
   are 100% of the btn, not the textbox. */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.7s;
  }

  &--animated {
    animation: moveInBottom 2s ease-out 1s;
    /* automatically applies styles at zero 
   percent before the animation starts */
    animation-fill-mode: backwards;
  }
}
